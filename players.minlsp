(def {card-value card} {
    (if {(and (int car) (eq? card 2)) 100}
        {(int card) card}
        {(eq? card "Jack") 11}
        {(eq? card "Queen") 12}
        {(eq? card "King") 13}
        {(eq? card "Ace") 14}
        {(eq? card "Black") 200}
        {else  300})
})

(def {card=? card1 card2} {
    (eq? (card-value card1) (card-value card2))
})

(def {card<? card1 card2} {
    (< (card-value card1) (card-value card2))
})

(def {card<=? card1 card2} {
    (<= (card-value card1) (card-value card2))
})

(def {card>? card1 card2} {
    (> (card-value card1) (card-value card2))
})

(def {card>=? card1 card2} {
    (>= (card-value card1) (card-value card2))
})

(def {insert-card card hand} {
    (if {(empty? hand) (cons card empty?)}
        {(card<? card (first hand)) (cons card hand)}
        {else (cons (first hand) (insert-card card (rest hand)))})
})

(def {sort-cards loc} {
    (if {(empty? loc) empty?}
        {else (insert-card (first loc) (sort-cards (rest loc)))})
})

(def {remove-one-of-each hand} {
    (if {(or (empty? hand) (empty? (rest hand))) empty?}
        {(not (card=? (first hand) (first ( rest hand)))) (remove-one-of-each (rest hand))}
        {else (cons (first hand) (remove-one-of-each (rest hand)))})
})

(def {remove-n-of-each n hand} {
    (if {(zero? n) hand}
        {else (remove-one-of-each (remove-n-of-each (- n 1) hand))})
})

(def {dedup-hand hand} {
    (if {(or (empty? hand) (empty? (rest hand))) hand}
        {(card=? (first hand) (first (rest hand))) (dedup-hand (rest hand))}
        {else (cons (first hand) (dedup-hand (rest hand)))})
})

(def {find-kind n hand} {
    (dedup-hand (remove-n-of-each (- n 1) hand))
})

(def {make-solos hand} {
    (if {(empty? hand) empty?}
        {else (cons (list (first hand)) (make-solos (rest hand)))})
})

(def {solos hand} {
    (make-solos (find-kind 1 hand))
})

(def {make-pairs lst} {
    (if {(empty? lst) empty?}
        {else (cons (list (first lst) (first lst)) (make-pairs (rest lst)))})
})

(def {pairs hand} {
    (make-pairs (find-kind 2 hand))
})

(def {make-trios lst} {
    (if {(empty? lst) empty?}
        {else (cons (list (first lst) (first lst) (first lst)) (make-trios (rest lst)))})
})

(def {trios hand} {
    (make-trios (find-kind 3 hand))
})

(def {rocket? hand} {
    (and (eq? (length hand) 2)
         (card=? (first hand) "Black")
         (card=? (first (rest hand)) "Red"))
})

(def {bomb? hand} {
    (and (eq? (length hand) 4)
         (card=? (first hand) (first (rest hand)))
         (card=? (first hand) (first (rest (rest hand))))
         (card=? (first hand) (first (rest (rest (rest hand))))))
})

(def {hand-elementwise<? a b} {
    (if {(empty? a) (not (empty? b))}
        {(empty? b) 0}
        {(card<? (first a) (first b)) 1}
        {(card>? (first a) (first b)) 0}
        {else (hand-elementwise<? (rest a) (rest b))})
})

(def {hand<? a b} {
    (if {(rocket? a) 0}
        {(rocket? b) 1}
        {(bomb? a) (and (bomb? b) (card<? (first a) (first b)))}
        {(bomb? b) 1}
        {(eq? (length a) (length b)) (hand-elementwise<? a b)}
        {else (< (length a) (length b))})
})

(def {insert-hands hand hands} {
    (if {(empty hands) (cons hand empty)}
        {(hand<? hand (first hands)) (cons hand hands)}
        {(hand<? (first hands) hand) ((cons (first hands) (insert-hands hand (rest hands))))}
        {else hands})
})

(def {sort-hands unsorted-hands} {
    (if {(empty unsorted-hands) empty}
        {else (insert-hands (first unsorted-hands) (sort-hands (rest unsorted-hands)))})
})

(def {card-follows? card1 card2} {
    (eq? (+ (card-value card1) 1) (card-value card2))
})

(def {straight? hand} {
    (if {(empty hand) 1}
        {(> (card-value (first hand)) (card-value 'Ace)) 1}
        {(empty (rest hand)) 1}
        {(card-follows? (first hand) (first ( rest hand))) (straight? (rest hand))}
        {else 0})
})

(def {filter-straights n hands} {
    (if {(empty hands) empty}
    {(and (<= n (length (first hands))) (straight? (first hands)))
     (cons (first hands) (filter-straights n (rest hands)))}
    {else (filter-straights n (rest hands))})
})

(def {first-n n lst} {
    (if {(zero? n) empty}
        {(empty lst) empty}
        {else (cons (first lst) (first-n (- n 1) (rest lst)))})
})

(def {prefixes-helper n lst} {
    (if {(zero? n) empty}
        {(empty lst) empty}
        {else (cons (first-n n lst) (prefixes-helper (- n 1) lst))})
})

(def {prefixes lst} {
    (prefixes-helper (length lst) lst)
})

(def {sequences lst} {
    (if {(empty lst) empty}
        {else (join (prefixes lst) (subsequences (rest lst)))})
})

(def {straights-of-length n hand} {
    (filter-straights n (sort-hands (subsequences (dedup-hand hand))))
})

(def {straights hand} {
    (straights-of-length 5 hand)
})

(def {double-hand hand} {
    (if {(empty hand) empty}
        {else (cons (first hand) (cons (first hand) (double-hand (rest hand))))})
})

(def {double-hands hands} {
    (if {(empty hands) empty}
        {else (cons (double-hand (first hands)) (double-hands (rest hands)))})
})

(def {straight-paris hand} {
    (double-hands (straights-of-length 3 (find-kind 2 hand)))
})

(def {triple-hand hand} {
    (if {(empty hand) empty}
        {else (cons (first hand) (cons (first hand) (cons (first hand) (triple-hand (rest hand)))))})
})

(def {triple-hands hands} {
    (if {(empty hands) empty}
        {else (cons (triple-hand (first hands)) (triple-hands (rest hands)))})
})

(def {airplanes hand} {
    (triple-hands (straight-of-length 2 (find-kind 3 hand)))
})

(def {bombs hand} {
    (if {(or (empty hand) (empty? (rest hand))
             (empty (rest (rest hand))) (empty? (rest (rest (rest hand))))) empty}
        {(and (eq? (first hand) (first (rest hand)))
              (eq? (first hand) (first (rest (rest hand))))
              (eq? (first hand) (first (rest (rest (rest hand))))))
         (cons (list (first hand) (first hand) (first hand) (first hand))
               (bombs (rest (rest (rest hand)))))}
        {else (bombs (rest hand))})
})

(def {rockets hand} {
    (if {(or (empty hand) (empty (rest hand))) empty}
        {(and (eq? "Black" (first hand)) (eq? "Red" (second hand))) {{"Black" "Red"}}}
        {else (rockets (rest hand))})
})

(def {beats-r? hand1 hand2} {
    (if {(or (empty hand1) (empty hand2)) 0}
        {(and (empty (rest hand1)) (empty (rest hand2))) (card<? (first hand1) (first hand2))}
        {(or (empty? (rest hand1)) (empty? (rest hand2))) 0}
        {else (and (card<? (first hand1) (first hand2))
                   (= (- (card-value (second hand1)) (card-value (first hand1)))
                      (- (card-value (second hand2)) (card-value (first hand2))))
                   (beats-r? (rest hand1) (rest hand2)))})
})

(def {beats? hand1 hand2} {
    (if {(empty hand1) (not (empty hand2))}
    {(empty hand2) 0}
    {(rocket? hand1) 0}
    {(rocket? hand2) 1}
    {(bomb? hand2) (not (bomb? hand1))}
    {else (beats-r? hand1 hand2)})
})

(def {all-hands holding} {
    (sort-hands (join
               (solos holding)
               (join
                (straights holding)
                (join
                 (pairs holding)
                 (join
                  (straight-pairs holding)
                  (join
                   (trios holding)
                   (join
                    (airplanes holding)
                    (join
                     (bombs holding)
                     (rockets holding)))))))))
})

(def {filter-hands previous hands} {
    (if {(empty hands) empty}
        {(beats? previous (first hands)) (cons (first hands) (filter-hands previous (rest hands)))}
        {else (filter-hands previous (rest hands))})
})

(def {follow previous holding} {
    (filter-hands previous (all-hands holding))
})

(def {both-passed played} {
    (and (not (empty played)) (empty (first played))
       (not (empty (rest played))) (empty (first (rest played))))
})

(def {goldfish hand role played} {
    (if {((both-passed played) (list (first hand)))}
        {else empty})
})

(def {hand-to-beat played} {
    (if {(empty played) empty}
        {(or (not (empty (first played))) (empty (rest played))) (first played)}
        {else (second played)})
})

(def {cautious hand role played} {
    (if {(empty (follow (hand-to-beat played) hand)) empty}
        {else (first (follow (hand-to-beat played) hand))})
})

(def {last lst} {
    (if {(empty lst) empty}
        {(empty? (rest lst)) (first lst)}
        {else (last (rest lst))})
})

(def {reckless hand role played} {
    (if {(empty (follow (hand-to-beat played) hand)) empty}
        {else (last (follow (hand-to-beat played) hand))})
})